#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; MAGTSale.tact_MAGTSale.headers.fc
;;
;; Header files for MAGTSale
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_dict_get_slice_slice
slice __tact_dict_get_slice_slice(cell d, int kl, slice k) inline;

;; __tact_dict_set_slice_slice
(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_exists_slice
int __tact_dict_exists_slice(cell d, int kl, slice k) inline;

;; __tact_dict_exists_int
int __tact_dict_exists_int(cell d, int kl, int k) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v, builder b) inline;

;; $Level$_load
(slice, ((int, int))) $Level$_load(slice sc_0) inline;

;; $Level$_as_optional
tuple $Level$_as_optional((int, int) v) inline;

;; $Level$_load_opt
tuple $Level$_load_opt(cell cl) inline;

;; $MAGTSale$_store
builder $MAGTSale$_store(builder build_0, (slice, slice, slice, int, cell, int, int, int, int, cell) v) inline;

;; $MAGTSale$_load
(slice, ((slice, slice, slice, int, cell, int, int, int, int, cell))) $MAGTSale$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Level$_not_null
((int, int)) $Level$_not_null(tuple v) inline;

;; $LevelInfo$_to_external
(int, int, int) $LevelInfo$_to_external(((int, int, int)) v) inline;

;; $RefQuery$_to_external
(int, slice) $RefQuery$_to_external(((int, slice)) v) inline;

;; $MAGTSale$init$_load
(slice, ((slice, slice, slice, int, cell, int, int, int))) $MAGTSale$init$_load(slice sc_0) inline;

;; $MAGTSale$_contract_init
(slice, slice, slice, int, cell, int, int, int, int, cell) $MAGTSale$_contract_init(slice $owner, slice $magtMinter, slice $saleJW, int $magtDecimals, cell $levelsInit, int $startLevel, int $startRemaining, int $refPoolHuman) impure inline;

;; $MAGTSale$_contract_load
(slice, slice, slice, int, cell, int, int, int, int, cell) $MAGTSale$_contract_load() impure inline;

;; $MAGTSale$_contract_store
() $MAGTSale$_contract_store((slice, slice, slice, int, cell, int, int, int, int, cell) v) impure inline;

;; $MAGTSale$_fun_OP_JETTON_TRANSFER
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_OP_JETTON_TRANSFER((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $MAGTSale$_fun_OP_BUY
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_OP_BUY((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $MAGTSale$_fun_OP_WITHDRAW
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_OP_WITHDRAW((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $MAGTSale$_fun_GAS_BUFFER_TON
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_GAS_BUFFER_TON((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $MAGTSale$_fun_FWD_TO_RECIPIENT
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_FWD_TO_RECIPIENT((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $MAGTSale$_fun_CALL_VALUE
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_CALL_VALUE((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $MAGTSale$_fun_get_owner
((slice, slice, slice, int, cell, int, int, int, int, cell), slice) $MAGTSale$_fun_get_owner((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $LevelInfo$_constructor_level_remaining_totalSold
((int, int, int)) $LevelInfo$_constructor_level_remaining_totalSold(int $level, int $remaining, int $totalSold) inline;

;; $MAGTSale$_fun_get_level
((slice, slice, slice, int, cell, int, int, int, int, cell), (int, int, int)) $MAGTSale$_fun_get_level((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $MAGTSale$_fun_get_ref_pool_left
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_get_ref_pool_left((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref;

;; $RefQuery$_constructor_exists_ref
((int, slice)) $RefQuery$_constructor_exists_ref(int $exists, slice $ref) inline;

;; $MAGTSale$_fun_get_referrer
((slice, slice, slice, int, cell, int, int, int, int, cell), (int, slice)) $MAGTSale$_fun_get_referrer((slice, slice, slice, int, cell, int, int, int, int, cell) $self, slice $addr) impure inline_ref;

;; $MAGTSale$_fun_min
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_min((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $a, int $b) impure inline_ref;

;; $MAGTSale$_fun_max
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_max((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $a, int $b) impure inline_ref;

;; $MAGTSale$_fun_pow10
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_pow10((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $decimals) impure inline_ref;

;; $MAGTSale$_fun_calc_human_tokens_from_ton
((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_calc_human_tokens_from_ton((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $paymentNano) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce(slice $to, int $value, int $bounce) inline;

;; $MAGTSale$_fun_send_raw_ton
((slice, slice, slice, int, cell, int, int, int, int, cell), ()) $MAGTSale$_fun_send_raw_ton((slice, slice, slice, int, cell, int, int, int, int, cell) $self, slice $to, int $amountNano) impure inline_ref;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $MAGTSale$_fun_send_jetton_transfer
((slice, slice, slice, int, cell, int, int, int, int, cell), ()) $MAGTSale$_fun_send_jetton_transfer((slice, slice, slice, int, cell, int, int, int, int, cell) $self, slice $jw, int $amountRaw, slice $destination) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $MAGTSale$_fun_notify
((slice, slice, slice, int, cell, int, int, int, int, cell), ()) $MAGTSale$_fun_notify((slice, slice, slice, int, cell, int, int, int, int, cell) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; MAGTSale.tact_MAGTSale.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(cell, int) __tact_dict_delete(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTDEL
""";

(slice, int) __tact_dict_get(cell dict, int key_len, slice index) asm(index dict key_len) """
    DICTGET NULLSWAPIFNOT
""";

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1 -> tuple __tact_tuple_create_2((X0, X1) v) asm """
    2 TUPLE
""";

forall X0, X1 -> (X0, X1) __tact_tuple_destroy_2(tuple v) asm """
    2 UNTUPLE
""";

slice __tact_dict_get_slice_slice(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_slice_slice(cell d, int kl, slice k, slice v) inline {
    if (null?(v)) {
        var (r, ok) = __tact_dict_delete(d, kl, k);
        return (r, ());
    } else {
        return (dict_set_builder(d, kl, k, begin_cell().store_slice(v)), ());
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

int __tact_dict_exists_slice(cell d, int kl, slice k) inline {
    var (r, ok) = __tact_dict_get(d, kl, k);
    return ok;
}

int __tact_dict_exists_int(cell d, int kl, int k) inline {
    var (r, ok) = idict_get?(d, kl, k);
    return ok;
}

builder $global_beginCell() impure asm """
    NEWC
""";

slice $global_myAddress() impure asm """
    MYADDR
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // â†’ Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // â†’ Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // â†’ Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // â†’ Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

builder $Builder$_fun_storeBit(int $value, builder $self) impure asm """
    1 STI
""";

builder $Builder$_fun_storeCoins(builder $self, int $value) impure asm """
    STVARUINT16
""";

builder $Builder$_fun_storeRef(cell $cell, builder $self) impure asm """
    STREF
""";

builder $Builder$_fun_storeMaybeRef(cell $cell, builder $self) impure asm """
    STOPTREF
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

builder $Builder$_fun_storeAddress(builder $self, slice $address) impure asm """
    STSLICER
""";

(slice, int) $Slice$_fun_loadBit(slice $self) impure asm( -> 1 0) """
    1 LDI
""";

(slice, int) $Slice$_fun_loadCoins(slice $self) impure asm( -> 1 0) """
    LDVARUINT16
""";

int $Slice$_fun_bits(slice $self) impure asm """
    SBITS
""";

(slice, slice) $Slice$_fun_loadAddress(slice $self) impure asm( -> 1 0) """
    LDMSGADDR
""";

((slice, slice, slice, int, cell, int, int, int, int, cell), ()) $MAGTSale$_fun_notify((slice, slice, slice, int, cell, int, int, int, int, cell) $self, cell $body) impure inline {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = false;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), ());
}

;; MAGTSale.tact_MAGTSale.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce(slice $to, int $value, int $bounce) inline {
    return (0, null(), null(), null(), $value, $to, $bounce);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline {
    return ($mode, $body, null(), null(), $value, $to, $bounce);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v, builder b) inline {
    return $DeployOk$_store(b, v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Level
;; TLB: _ tokens:int257 price:int257 = Level
;;

(slice, ((int, int))) $Level$_load(slice sc_0) inline {
    var v'tokens = sc_0~load_int(257);
    var v'price = sc_0~load_int(257);
    return (sc_0, (v'tokens, v'price));
}

tuple $Level$_as_optional((int, int) v) inline {
    var (v'tokens, v'price) = v;
    return __tact_tuple_create_2(v'tokens, v'price);
}

tuple $Level$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Level$_as_optional(sc~$Level$_load());
}

((int, int)) $Level$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'tokens, int vvv'price) = __tact_tuple_destroy_2(v);
    return (vvv'tokens, vvv'price);
}

;;
;; Type: LevelInfo
;; TLB: _ level:int257 remaining:int257 totalSold:int257 = LevelInfo
;;

(int, int, int) $LevelInfo$_to_external(((int, int, int)) v) inline {
    var (v'level, v'remaining, v'totalSold) = v; 
    return (v'level, v'remaining, v'totalSold);
}

((int, int, int)) $LevelInfo$_constructor_level_remaining_totalSold(int $level, int $remaining, int $totalSold) inline {
    return ($level, $remaining, $totalSold);
}

;;
;; Type: RefQuery
;; TLB: _ exists:bool ref:address = RefQuery
;;

(int, slice) $RefQuery$_to_external(((int, slice)) v) inline {
    var (v'exists, v'ref) = v; 
    return (v'exists, v'ref);
}

((int, slice)) $RefQuery$_constructor_exists_ref(int $exists, slice $ref) inline {
    return ($exists, $ref);
}

;;
;; Type: MAGTSale
;; TLB: _ owner:address magtMinter:address saleJW:address magtDecimals:int257 levels:dict<int, ^Level{tokens:int257,price:int257}> currentLevel:int257 remainingInLevel:int257 totalSoldHuman:int257 refPoolLeftHuman:int257 refOf:dict<address, address> = MAGTSale
;;

builder $MAGTSale$_store(builder build_0, (slice, slice, slice, int, cell, int, int, int, int, cell) v) inline {
    var (v'owner, v'magtMinter, v'saleJW, v'magtDecimals, v'levels, v'currentLevel, v'remainingInLevel, v'totalSoldHuman, v'refPoolLeftHuman, v'refOf) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'magtMinter);
    build_0 = build_0.store_slice(v'saleJW);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'magtDecimals, 257);
    build_1 = build_1.store_dict(v'levels);
    build_1 = build_1.store_int(v'currentLevel, 257);
    build_1 = build_1.store_int(v'remainingInLevel, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'totalSoldHuman, 257);
    build_2 = build_2.store_int(v'refPoolLeftHuman, 257);
    build_2 = build_2.store_dict(v'refOf);
    build_1 = store_builder_ref(build_1, build_2);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, slice, slice, int, cell, int, int, int, int, cell))) $MAGTSale$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'magtMinter = sc_0~load_msg_addr();
    var v'saleJW = sc_0~load_msg_addr();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'magtDecimals = sc_1~load_int(257);
    var v'levels = sc_1~load_dict();
    var v'currentLevel = sc_1~load_int(257);
    var v'remainingInLevel = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'totalSoldHuman = sc_2~load_int(257);
    var v'refPoolLeftHuman = sc_2~load_int(257);
    var v'refOf = sc_2~load_dict();
    return (sc_0, (v'owner, v'magtMinter, v'saleJW, v'magtDecimals, v'levels, v'currentLevel, v'remainingInLevel, v'totalSoldHuman, v'refPoolLeftHuman, v'refOf));
}

(slice, ((slice, slice, slice, int, cell, int, int, int))) $MAGTSale$init$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'magtMinter = sc_0~load_msg_addr();
    var v'saleJW = sc_0~load_msg_addr();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'magtDecimals = sc_1~load_int(257);
    var v'levelsInit = sc_1~load_dict();
    var v'startLevel = sc_1~load_int(257);
    var v'startRemaining = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'refPoolHuman = sc_2~load_int(257);
    return (sc_0, (v'owner, v'magtMinter, v'saleJW, v'magtDecimals, v'levelsInit, v'startLevel, v'startRemaining, v'refPoolHuman));
}

(slice, slice, slice, int, cell, int, int, int, int, cell) $MAGTSale$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MAGTSale$_load();
    }
    else {
        (slice $owner, slice $magtMinter, slice $saleJW, int $magtDecimals, cell $levelsInit, int $startLevel, int $startRemaining, int $refPoolHuman) = $sc~$MAGTSale$init$_load();
        $sc.end_parse();
        return $MAGTSale$_contract_init($owner, $magtMinter, $saleJW, $magtDecimals, $levelsInit, $startLevel, $startRemaining, $refPoolHuman);
    }
}

() $MAGTSale$_contract_store((slice, slice, slice, int, cell, int, int, int, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $MAGTSale$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract MAGTSale functions
;;

(slice, slice, slice, int, cell, int, int, int, int, cell) $MAGTSale$_contract_init(slice $owner, slice $magtMinter, slice $saleJW, int $magtDecimals, cell $levelsInit, int $startLevel, int $startRemaining, int $refPoolHuman) impure inline {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = (null(), null(), null(), null(), null(), null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'magtMinter = $magtMinter;
    $self'saleJW = $saleJW;
    $self'magtDecimals = $magtDecimals;
    $self'levels = $levelsInit;
    $self'currentLevel = $startLevel;
    $self'remainingInLevel = $startRemaining;
    $self'totalSoldHuman = 0;
    $self'refPoolLeftHuman = $refPoolHuman;
    return ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_OP_JETTON_TRANSFER((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_0 = 260734629;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_0);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_OP_BUY((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_1 = 2963393278;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_1);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_OP_WITHDRAW((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_2 = 30583;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_2);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_GAS_BUFFER_TON((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_3 = 10000000;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_3);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_FWD_TO_RECIPIENT((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_4 = 30000000;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_4);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_CALL_VALUE((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_5 = 100000000;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_5);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), slice) $MAGTSale$_fun_get_owner((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_6 = $self'owner;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_6);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), (int, int, int)) $MAGTSale$_fun_get_level((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_7 = $LevelInfo$_constructor_level_remaining_totalSold($self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman);
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_7);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_get_ref_pool_left((slice, slice, slice, int, cell, int, int, int, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    var $fresh$ret_8 = $self'refPoolLeftHuman;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_8);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), (int, slice)) $MAGTSale$_fun_get_referrer((slice, slice, slice, int, cell, int, int, int, int, cell) $self, slice $addr) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    if (__tact_dict_exists_slice($self'refOf, 267, $addr)) {
        var $fresh$ret_9 = $RefQuery$_constructor_exists_ref(true, __tact_dict_get_slice_slice($self'refOf, 267, $addr));
        return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_9);
    } else {
        var $fresh$ret_10 = $RefQuery$_constructor_exists_ref(false, null());
        return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_10);
    }
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_min((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $a, int $b) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    if (($a < $b)) {
        var $fresh$ret_11 = $a;
        return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_11);
    } else {
        var $fresh$ret_12 = $b;
        return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_12);
    }
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_max((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $a, int $b) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    if (($a > $b)) {
        var $fresh$ret_13 = $a;
        return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_13);
    } else {
        var $fresh$ret_14 = $b;
        return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_14);
    }
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_pow10((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $decimals) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    int $one = 1;
    int $ten = 10;
    int $res_init = $one;
    int $i_init = 0;
    int $res = $res_init;
    int $i = $i_init;
    while (($i < $decimals)) {
        $res = ($res * $ten);
        $i = ($i + 1);
    }
    var $fresh$ret_15 = $res;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_15);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), int) $MAGTSale$_fun_calc_human_tokens_from_ton((slice, slice, slice, int, cell, int, int, int, int, cell) $self, int $paymentNano) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    int $left_init = $paymentNano;
    int $out_init = 0;
    int $lvl_init = $self'currentLevel;
    int $rem_init = $self'remainingInLevel;
    int $leftNano = $left_init;
    int $outHuman = $out_init;
    int $lvl = $lvl_init;
    int $rem = $rem_init;
    while (( (( (($leftNano > 0)) ? (__tact_dict_exists_int($self'levels, 257, $lvl)) : (false) )) ? (($rem > 0)) : (false) )) {
        tuple $Lopt = $Level$_load_opt(__tact_dict_get_int_cell($self'levels, 257, $lvl));
        throw_unless(30229, (~ null?($Lopt)));
        var ($L'tokens, $L'price) = $Level$_not_null($Lopt);
        int $priceNano = $L'price;
        int $mayBuy = ($leftNano / $priceNano);
        if (($mayBuy > 0)) {
            int $take = ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_min($rem, $mayBuy);
            $outHuman = ($outHuman + $take);
            $rem = ($rem - $take);
            $leftNano = ($leftNano - ($take * $priceNano));
            ifnot ($rem) {
                $lvl = ($lvl + 1);
                if (__tact_dict_exists_int($self'levels, 257, $lvl)) {
                    tuple $nextOpt = $Level$_load_opt(__tact_dict_get_int_cell($self'levels, 257, $lvl));
                    throw_unless(53246, (~ null?($nextOpt)));
                    var ($next'tokens, $next'price) = $Level$_not_null($nextOpt);
                    $rem = $next'tokens;
                } else {
                    $rem = 0;
                }
            }
        } else {
            $rem = 0;
        }
    }
    var $fresh$ret_16 = $outHuman;
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), $fresh$ret_16);
}

((slice, slice, slice, int, cell, int, int, int, int, cell), ()) $MAGTSale$_fun_send_raw_ton((slice, slice, slice, int, cell, int, int, int, int, cell) $self, slice $to, int $amountNano) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    $global_send($SendParameters$_constructor_to_value_bounce($to, $amountNano, false));
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), ());
}

((slice, slice, slice, int, cell, int, int, int, int, cell), ()) $MAGTSale$_fun_send_jetton_transfer((slice, slice, slice, int, cell, int, int, int, int, cell) $self, slice $jw, int $amountRaw, slice $destination) impure inline_ref {
    var (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)) = $self;
    cell $empty = $Builder$_fun_endCell($global_beginCell());
    builder $b = $Builder$_fun_storeRef($empty, $Builder$_fun_storeBit(true, $Builder$_fun_storeCoins($Builder$_fun_storeMaybeRef(null(), $Builder$_fun_storeAddress($Builder$_fun_storeAddress(store_uint(store_uint(store_uint($global_beginCell(), ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_OP_JETTON_TRANSFER(), 32), 0, 64), $amountRaw, 128), $destination), $global_myAddress())), ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_FWD_TO_RECIPIENT())));
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($jw, ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_CALL_VALUE(), true, 1, $Builder$_fun_endCell($b)));
    return (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf), ());
}

;;
;; Get methods of a Contract MAGTSale
;;

_ %get_owner() method_id(80293) {
    var self = $MAGTSale$_contract_load();
    var res = self~$MAGTSale$_fun_get_owner();
    return res;
}

_ %get_level() method_id(80005) {
    var self = $MAGTSale$_contract_load();
    var res = self~$MAGTSale$_fun_get_level();
    return $LevelInfo$_to_external(res);
}

_ %get_ref_pool_left() method_id(74249) {
    var self = $MAGTSale$_contract_load();
    var res = self~$MAGTSale$_fun_get_ref_pool_left();
    return res;
}

_ %get_referrer(slice $addr) method_id(103639) {
    slice $addr = $addr;
    var self = $MAGTSale$_contract_load();
    var res = self~$MAGTSale$_fun_get_referrer($addr);
    return $RefQuery$_to_external(res);
}

;;
;; Routing of a Contract MAGTSale
;;


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf) = $MAGTSale$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg.preload_uint(32);
    }
    ;; Receive Deploy message
    if (op == 0x946a98b6) {
        in_msg~skip_bits(32);
        var $deploy'queryId = in_msg~load_uint(64);
        ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId), begin_cell()));
        $MAGTSale$_contract_store(($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf));
        return ();
    }
    
    ;; Receiver fallback
    slice $msg = in_msg;
    slice $sender = __tact_context_get_sender();
    if (($Slice$_fun_bits($msg) >= 32)) {
        int $op_pre = preload_uint($msg, 32);
        if (($op_pre == ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_OP_WITHDRAW())) {
            $msg~load_uint(32);
            int $amount = $msg~$Slice$_fun_loadCoins();
            throw_unless(47989, ( equal_slices_bits($sender, $self'owner) ));
            ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_send_raw_ton($self'owner, $amount);
            $MAGTSale$_contract_store(($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf));
            return ();
        }
    }
    slice $cs = $msg;
    if ($Slice$_fun_bits($cs)) {
        if (($Slice$_fun_bits($cs) < 32)) {
            $MAGTSale$_contract_store(($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf));
            return ();
        }
        int $op_read = $cs~load_uint(32);
        if (($op_read != ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_OP_BUY())) {
            $MAGTSale$_contract_store(($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf));
            return ();
        }
    }
    slice $buyer = $sender;
    int $tons = $Context$_get_value(__tact_context_get());
    throw_unless(7126, ($tons > 0));
    if (($Slice$_fun_bits($cs) >= 1)) {
        int $has_ref = $cs~$Slice$_fun_loadBit();
        if (( ($has_ref) ? (($Slice$_fun_bits($cs) >= 267)) : (false) )) {
            slice $ref_addr = $cs~$Slice$_fun_loadAddress();
            if (( ((~ __tact_dict_exists_slice($self'refOf, 267, $buyer))) ? (( ~ equal_slices_bits($ref_addr, $buyer) )) : (false) )) {
                $self'refOf~__tact_dict_set_slice_slice(267, $buyer, $ref_addr);
            }
        }
    }
    int $willSendRef = ( (__tact_dict_exists_slice($self'refOf, 267, $buyer)) ? (($self'refPoolLeftHuman > 0)) : (false) );
    int $jwCalls = (1 + ($willSendRef ? 1 : 0));
    int $needForJW = ($jwCalls * ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_CALL_VALUE());
    int $needMin = (($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_GAS_BUFFER_TON() + $needForJW);
    throw_unless(43904, ($tons >= $needMin));
    int $paymentNano = $tons;
    int $toBuyHuman = ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_calc_human_tokens_from_ton($paymentNano);
    throw_unless(37401, ($toBuyHuman > 0));
    int $remaining = $toBuyHuman;
    while (($remaining > 0)) {
        int $lvl = $self'currentLevel;
        throw_unless(17803, __tact_dict_exists_int($self'levels, 257, $lvl));
        int $r_now = $self'remainingInLevel;
        if (($remaining <= $r_now)) {
            $self'remainingInLevel = ($r_now - $remaining);
            $remaining = 0;
        } else {
            $remaining = ($remaining - $r_now);
            $self'currentLevel = ($lvl + 1);
            ifnot (__tact_dict_exists_int($self'levels, 257, $self'currentLevel)) {
                $self'remainingInLevel = 0;
                $remaining = 0;
            } else {
                tuple $nextOpt = $Level$_load_opt(__tact_dict_get_int_cell($self'levels, 257, $self'currentLevel));
                throw_unless(19276, (~ null?($nextOpt)));
                var ($next'tokens, $next'price) = $Level$_not_null($nextOpt);
                $self'remainingInLevel = $next'tokens;
            }
        }
    }
    $self'totalSoldHuman = ($self'totalSoldHuman + $toBuyHuman);
    int $bonusHuman = 0;
    if ($willSendRef) {
        int $five = (($toBuyHuman * 5) / 100);
        if (($five > 0)) {
            int $grant = ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_min($self'refPoolLeftHuman, $five);
            $bonusHuman = $grant;
            $self'refPoolLeftHuman = ($self'refPoolLeftHuman - $grant);
        }
    }
    int $base = ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_pow10($self'magtDecimals);
    int $amountBuyerRaw = ($toBuyHuman * $base);
    int $amountRefRaw = ($bonusHuman * $base);
    ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_send_jetton_transfer($self'saleJW, $amountBuyerRaw, $buyer);
    if (( (($amountRefRaw > 0)) ? (__tact_dict_exists_slice($self'refOf, 267, $buyer)) : (false) )) {
        slice $refFinalOpt = __tact_dict_get_slice_slice($self'refOf, 267, $buyer);
        throw_unless(1242, (~ null?($refFinalOpt)));
        slice $ref_final = __tact_not_null($refFinalOpt);
        ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_send_jetton_transfer($self'saleJW, $amountRefRaw, $ref_final);
    }
    int $toOwner = ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_max(0, ($paymentNano - $needMin));
    if (($toOwner > 0)) {
        ($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf)~$MAGTSale$_fun_send_raw_ton($self'owner, $toOwner);
    }
    $MAGTSale$_contract_store(($self'owner, $self'magtMinter, $self'saleJW, $self'magtDecimals, $self'levels, $self'currentLevel, $self'remainingInLevel, $self'totalSoldHuman, $self'refPoolLeftHuman, $self'refOf));
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}